/*
 * Copyright 2011 Grepo Committers.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.codehaus.grepo.query.jpa.generator;

import javax.persistence.Query;

import org.codehaus.grepo.query.commons.annotation.GenericQuery;
import org.codehaus.grepo.query.commons.aop.QueryMethodParameterInfo;
import org.codehaus.grepo.query.jpa.context.JpaQueryExecutionContext;

/**
 * @author dguggi
 */
public abstract class AbstractQueryGenerator extends QueryGeneratorBase {

    private static final long serialVersionUID = 8237792232824916275L;

    /**
     * <b>Note:</b> Per default we suppress setting of positional parameters for good reasons ;). This means that
     * queries generated by subclasses of {@code AbstractQueryGenerator} <b>have</b> to use named parameter syntax.
     */
    public AbstractQueryGenerator() {
        super(false, true);
    }

    @Override
    protected Query createQuery(QueryMethodParameterInfo qmpi, JpaQueryExecutionContext context) {
        GenericQuery genericQuery = qmpi.getMethodAnnotation(GenericQuery.class);
        String queryString = createQueryString(qmpi, context);

        final Query query;
        if (isNativeQuery(genericQuery)) {
            query = createNativeQuery(queryString, qmpi, context);
        } else {
            query = context.getEntityManager().createQuery(queryString);
        }

        applyQueryParameters(qmpi, context, query);
        return query;
    }

    /**
     * Factory method used in order to create appropriate query strings.
     *
     * @param qmpi The query method parameter info.
     * @param context The context.
     * @return Returns the query string.
     */
    protected abstract String createQueryString(QueryMethodParameterInfo qmpi, JpaQueryExecutionContext context);
}
