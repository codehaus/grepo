<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
    <bookinfo>
        <title>Generic Repository</title>
        <authorgroup>
            <author>
                <firstname>Daniel</firstname>
                <surname>Guggi</surname>
                <email>daniel.guggi@gmail.com</email>
            </author>
            <author>
                <firstname>Johann</firstname>
                <surname>Zagler</surname>
                <email>johann.zagler@gmail.com</email>
            </author>
        </authorgroup>
        <copyright>
            <year>2007</year>
            <holder>Grepo</holder>
        </copyright>
        <releaseinfo>1.0</releaseinfo>
    </bookinfo>
    <preface>
        <title>Preface</title>
        <section>
            <title>What is Grepo</title>
            <para>
                The Generic Repository (grepo) is an open source (ASLv2) framework for Java which allows you to access
                (database) repositories in a generic and consistent manner. Using grepo, it is generally no longer
                required to provide all the boilerplate code which is necessary in order to access (database)
                repositories from Java. All you have to do is write appropriate database code (queries, procedures,
                functions etc.), an appropriately annotated Java interface, and very little Spring configuration. Using
                the framework has the following advantages
                <itemizedlist>
                    <listitem>
                        <para>Improves development time because no implementations are required for data access
                            objects (DAOs).</para>
                    </listitem>
                    <listitem>
                        <para>
                            Simplifies development and increases code quality - you won't hear your colleague say
                            <emphasis role="italic">"Hey look, what I've found - I guess this is not the way we do
                                this normally?!"</emphasis>
                            anymore.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Makes your data access layer consistent - similar/equal data access operations are
                            "implemented" (and thus work) in the same way which in turn makes software more stable and
                            in general better maintainable.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Goals</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">Simplicity</emphasis>
                        The framework should be easy to use and understand - grepo was designed around the convention
                        over configuration paradigm.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Flexibility</emphasis>
                        The framework should be flexible enough, so it can be used for most database access specific
                        tasks - grepo is easily configurable and extensible in order to fit custom/special needs.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Consistency</emphasis>
                        The framework should assist in building consistent data access layers - grepo allows to define
                        and configure rules and guidelines (coding conventions etc...) for the data access objects.
                        Those rules are then applied and enforced by the framework - grepo has a predefined (default)
                        set of rules which may be customized for custom/special needs.
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Features</title>
            <itemizedlist>
                <listitem>
                    <para>generic support for Hibernate based DAOs</para>
                </listitem>
                <listitem>
                    <para>generic support for Jpa based DAOs</para>
                </listitem>
                <listitem>
                    <para>generic support for executing database stored-procedures and functions</para>
                </listitem>
                <listitem>
                    <para>highly customizable</para>
                </listitem>
            </itemizedlist>
        </section>
    </preface>
    <chapter>
        <title>Concepts</title>
        <section>
            <title>Introduction</title>
            <para>Write Introduction for Grepo concepts</para>
        </section>
    </chapter>
    <chapter>
        <title>Modules</title>
        <section>
            <title>Core</title>
            <para></para>
        </section>
        <section>
            <title>Query commons</title>
            <para></para>
        </section>
        <section>
            <title>Query Hibernate</title>
            <para>This is the getting started guide for the Generic Query (gquery) component of the grepo framework.
                It's not supposed to be a complete reference manual - the goal is to show a basic usage and
                configuration scenario of grepo's gquery component (using hibernate). If you have problems understanding
                parts of this guide or the framework in general or if you have any suggestions, good ideas or if you
                have found potential bugs please let us know. So let's get started!</para>
            <section>
                <title>Creating a repository</title>
                <programlisting language="java"> package demo.repository; import
                    org.codehaus.grepo.query.hibernate.repository.ReadWriteHibernateRepository; import demo.domain.User;
                    public interface UserRepository extends ReadWriteHibernateRepository&lt;User, Long&gt; {
    @GenericQuery(query = "from User where username = ?")
    User getByUsername(String username);

    @GenericQuery(query = "select * from USERS where username = ?", isNativeQuery = true)
    @HibernateQueryOptions(entityClasses = @EntityClass(clazz = User.class))
    User getByUsername(String username);
}
                </programlisting>
            </section>
        </section>
        <section>
            <title>Query JPA</title>
            <para></para>
        </section>
        <section>
            <title>Procedure</title>
            <para></para>
        </section>
    </chapter>
</book>