 -----
 Overview
 -----
 Daniel Guggi
 -----
 2009-07-16
 -----

What is gRepo?

  gRepo stands for <"Generic Repository"> and allows to access databases/repositories in a
  generic and consistent manner. Using gRepo you no longer have to write all the
  boilerplate code required in order to access database(s) from Java. All you have to do,
  is to write appropriate database (queries, procedures, functions etc.) code,
  an appropriately annotated Java interface and very litte spring configuration (basically one
  bean definition per DAO). Using the framework has the following advantages:

  * Improves development time because no implementations are required for DAOs (Data Access Objects)

  * Simplifies development and code quality - you won't hear your colleague say
    "Hey look, what I've found - I guess this is not the way we do this normally?!" anymore.

  * Makes your DAO layer consistent - similar/equal data access operations are "implemented"
    (and thus work) in the same way which in turn makes your DAO layer and software in general
    better maintainable.

* Goals

  gRepo was designed around the following goals:

  * <<Simplicity>> - The framework should be easy to use and understand. gRepo is designed around the
	"Convention over Configuration" paradigm.

  * <<Flexibility>> - The framework should be flexible enough, so it can be used for almost all database
    access specific tasks. gRepo is easily configurable and extensible in order to also fit
    custom/special needs.

  * <<Consistency>> - The framework should assist in building a consistent DAO layer. gRepo allows to
    define and configure rules and guidelines for the DAO layer. Those rules are then applied
    and enforced by the framework - gRepo has a predefined set of rules which may be customized
    for special needs.


Components

  The framework consists of the following main components:

* gQuery

  gQuery stands for <"Generic Query"> and allows to access databases using SQL queries. Currently the
  following ORM (Object Relational Mapping) tools/APIs are supported:

  * Native Hibernate API

  * Java Persistence API (JPA)

  []

  The gQuery component defines a set of (default) rules for DAOs which may be customized/ extendeted
  to fit special needs. The framework provides default implementations for both "read-only" and
  "read-write" DAOs which may be used for basic CRUD operations. However it's up to you to provide your
  own implementation(s) if desired. Furthermore gQuery offers the possiblility to define and execute
  various queries (SQL, HQL, JPQL) and DAO methods without requiring custom implementations.

* gProcedure

  gProcedure stands for <"Generic Procedure"> and allows to access dabases using PLSQL (that is calling
  stored procedures and/or functions) without requiring custom implementations.
  The framework is build on top of the Spring's (JDBC) framework.


Releases

  There is currently no release.
